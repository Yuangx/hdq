package repos

import (
	"github.com/qiniu/hdq"
)

// -----------------------------------------------------------------------------

type Repo struct {
	Repo       string
	ForkedFrom string
	Title      string
	Language   string
	UpdateTime string
	Star       int
	Forks      int
}

func newRepo(node hdq.NodeSet) Repo {
	aRepo := node.any.a.attr("itemprop", "name codeRepository").one
	forkedFrom := aRepo.parentN(2).any.containsText("Forked from").one.nextSibling(1).a.hrefVal?:""
	title := node.any.p.attr("itemprop", "description").text?:""
	// aRepo.parentN(3).dump
	return {
		Repo:       aRepo.hrefVal!,
		ForkedFrom: forkedFrom,
		Title:      title,
	}
	/*	node = node.child
		repoStats := node.div.class("repo-list-stats").one
		return {
			Language:   repoStats.firstTextChild.text!,
			UpdateTime: node.class("repo-list-meta").child.element("time").attr("datetime")!,
			Star:       repoStats.child.a.attr("aria-label", "Stargazers").int!,
			Forks:      repoStats.child.a.attr("aria-label", "Forks").int!,
		}
	*/
}

// -----------------------------------------------------------------------------

type Result struct {
	Repos []Repo
	Next  string
}

func New(doc hdq.NodeSet) Result {
	divRepos := doc.any.div.id("user-repositories-list").one
	repoList := divRepos.child.ul.one
	repos := [newRepo(x) for x <- repoList.child.li.one]
	next := doc.any.div.class("paginate-container").one.any.a.childEqualText("Next").hrefVal?:""
	return {Repos: repos, Next: next}
}

// -----------------------------------------------------------------------------
